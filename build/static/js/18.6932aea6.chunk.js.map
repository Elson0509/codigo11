{"version":3,"sources":["components/Loading/Spinner.js","Pages/Login/Login/LoginForm/LoginForm.js","Pages/Login/Login/SignupForm/SignupForm.js","components/Modals/ModalForgetPassword.js","Pages/Login/Login/index.js","Pages/Login/Reset/ResetForm/ResetForm.js","Pages/Login/Reset/index.js","Pages/Login/index.js"],"names":["memo","className","withRouter","props","useState","errorMessage","setErrorMessage","textButton","setTextButton","validationSchema","Yup","email","required","password","min","formik","useFormik","initialValues","onSubmit","values","axios","post","then","res","localStorage","setItem","data","token","history","push","catch","err","response","message","handleSubmit","type","name","aria-describedby","onChange","handleChange","value","onBlur","handleBlur","touched","errors","role","onClick","toggle","successMessage","setSuccessMessage","buttonText","setButtonText","username","max","password2","oneOf","Axios","error","ModalForgetPassword","buttonSuccessText","setButtonSuccessText","spinner","setSpinner","isOpen","modal","Spinner","setModal","useEffect","userToken","setModalHandler","prev","tabsContent","title","content","to","tabsWrapperClass","transform","showInkBar","items","map","tab","index","getContent","key","match","params","Login","exact","path","url","component","LogUser","Reset"],"mappings":"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","file":"static/js/18.6932aea6.chunk.js","sourcesContent":["import React, {memo} from 'react';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"spinner\"/>\r\n    );\r\n};\r\n\r\nexport default memo(Spinner);","import React, {useState, Fragment} from 'react';\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport axios from '../../../../util/axios-base';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst LoginForm = (props) => {\r\n\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [textButton, setTextButton] = useState('ENTRAR')\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email('Por favor, digite um formato de email válido.').required('Por favor, digite um email.'),\r\n        password: Yup.string().required('Digite a senha.').min(6, 'Pelo menos ${min} caracteres')\r\n    })\r\n\r\n    const formik = useFormik({ \r\n        initialValues: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        onSubmit: values => {\r\n            setTextButton('ENTRANDO...')\r\n            setErrorMessage('')\r\n            axios.post('/authenticate', values)\r\n                .then(res => {\r\n                    localStorage.setItem('userToken', res.data.token)\r\n                    props.history.push('/dashboard')\r\n                })\r\n                .catch(err => {\r\n                    setErrorMessage(err.response.data.message || 'Login inválido.')\r\n                    setTextButton('ENTRAR')\r\n                })\r\n        },\r\n        validationSchema\r\n    })\r\n\r\n    return (\r\n        <Fragment>\r\n            <div>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>Email</label>\r\n                        <input type=\"email\" \r\n                            name=\"email\" \r\n                            className=\"form-control\" \r\n                            aria-describedby=\"emailHelp\" \r\n                            onChange={formik.handleChange} \r\n                            value={formik.values.email}\r\n                            onBlur={formik.handleBlur}/>\r\n                        {formik.touched.email && formik.errors.email && <div className=\"alert alert-warning\" role=\"alert\">\r\n                            {formik.errors.email}\r\n                        </div>}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Senha</label>\r\n                        <input \r\n                            type=\"password\" \r\n                            name=\"password\" \r\n                            className=\"form-control\" \r\n                            onChange={formik.handleChange} \r\n                            value={formik.values.password}\r\n                            onBlur={formik.handleBlur}/>\r\n                        {formik.touched.password && formik.errors.password && <div className=\"alert alert-warning\" role=\"alert\">\r\n                            {formik.errors.password}\r\n                        </div>}\r\n                        <button type=\"button\"\r\n                        onClick={props.toggle}\r\n                        className=\"btn btn-link\">Esqueci minha senha</button>\r\n                    </div>\r\n                    \r\n                    <button \r\n                        type=\"submit\" \r\n                        className={`btn btn-lg btn-wide btn-block btn-primary mt-4 ${textButton!=='ENTRAR' ? 'disabled' : ''}`}\r\n                        >{textButton}</button>\r\n                </form>\r\n                {errorMessage && <div className=\"alert alert-warning\" role=\"alert\">\r\n                    {errorMessage}\r\n                </div>}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default withRouter(LoginForm);","import React, {useState} from 'react';\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport Axios from '../../../../util/axios-base';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst SignupForm = (props) => {\r\n\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [successMessage, setSuccessMessage] = useState('')\r\n    const [buttonText, setButtonText] = useState('CRIAR')\r\n\r\n    const validationSchema = Yup.object({\r\n        username: Yup.string().min(3, 'Apelido com pelo menos ${min} caracteres').max(16, 'Apelido com ${max} caracteres ou menos').required('Por favor, digite um username.'),\r\n        email: Yup.string().email('Por favor, digite um formato de email válido.').required('Por favor, digite um email.'),\r\n        password: Yup.string().required('Digite a senha.').min(6, 'Pelo menos ${min} caracteres').max(30, 'No máximo ${max} caracteres'),\r\n        password2: Yup.string().oneOf([Yup.ref('password'), null], 'Senhas devem ser iguais')\r\n    })\r\n\r\n    const formik = useFormik({ \r\n        initialValues: {\r\n            username: '',\r\n            email: '',\r\n            password: '',\r\n            password2: ''\r\n        },\r\n        onSubmit: values => {\r\n            setButtonText('CRIANDO...')\r\n            Axios.post('/register', values)\r\n                .then(res => {\r\n                    setSuccessMessage(res.data.message)\r\n                    setButtonText('CONTA CRIADA!')\r\n                })\r\n                .catch(err => {\r\n                    setErrorMessage(err.response.data.error.message.message || 'Desculpe, mas um erro ocorreu.')\r\n                    setButtonText('CRIAR')\r\n                })\r\n        },\r\n        validationSchema\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label>Apelido</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        name='username' \r\n                        className=\"form-control\" \r\n                        aria-describedby=\"UsernameHelp\" \r\n                        onChange={formik.handleChange} \r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.username}/>\r\n                    <small className=\"form-text text-muted\">Escolha um apelido para interagir no fórum.</small>\r\n                    {formik.touched.username && formik.errors.username && <div className=\"alert alert-warning\" role=\"alert\">\r\n                        {formik.errors.username}\r\n                    </div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Email</label>\r\n                    <input \r\n                        type=\"email\" \r\n                        name='email' \r\n                        className=\"form-control\" \r\n                        aria-describedby=\"emailHelp\" \r\n                        onChange={formik.handleChange} \r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.email}/>\r\n                    <small className=\"form-text text-muted\">Seu email nunca será compartilhado!</small>\r\n                    {formik.touched.email && formik.errors.email && <div className=\"alert alert-warning\" role=\"alert\">\r\n                        {formik.errors.email}\r\n                    </div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Senha</label>\r\n                    <input \r\n                        type=\"password\" \r\n                        name='password' \r\n                        className=\"form-control\" \r\n                        onChange={formik.handleChange} \r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.password}/>\r\n                    {formik.touched.password && formik.errors.password && <div className=\"alert alert-warning\" role=\"alert\">\r\n                        {formik.errors.password}\r\n                    </div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Repita a Senha</label>\r\n                    <input \r\n                        type=\"password\" \r\n                        name='password2' \r\n                        className=\"form-control\" \r\n                        onChange={formik.handleChange} \r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.password2}/>\r\n                    {formik.touched.password2 && formik.errors.password2 && <div className=\"alert alert-warning\" role=\"alert\">\r\n                        {formik.errors.password2}\r\n                    </div>}\r\n                </div>\r\n                <button type=\"submit\" \r\n                    className={`btn btn-lg btn-wide btn-block btn-primary mt-4 ${buttonText==='CRIANDO...' || buttonText==='CONTA CRIADA!' ? 'disabled' : ''}`}\r\n                    >\r\n                        {buttonText}\r\n                </button>\r\n            </form>\r\n            {errorMessage && <div className=\"alert alert-warning\" role=\"alert\">\r\n                {errorMessage}\r\n            </div>}\r\n            {successMessage && <div className=\"alert alert-success\" role=\"alert\">\r\n                {successMessage}\r\n            </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(SignupForm);","import React, {useState, Fragment} from 'react';\r\nimport {Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport axios from '../../util/axios-base'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport Spinner from '../../components/Loading/Spinner'\r\n\r\nconst ModalForgetPassword = (props) => {\r\n\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [successMessage, setSuccessMessage] = useState('')\r\n    const [buttonSuccessText, setButtonSuccessText] = useState('Confirmar')\r\n    const [spinner, setSpinner] = useState(false)\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email('Por favor, digite um formato de email válido.').required('Por favor, digite um email.'),\r\n    })\r\n\r\n    const formik = useFormik({ \r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        onSubmit: values => {\r\n            if(buttonSuccessText==='OK'){\r\n                props.toggle()\r\n            }\r\n            else{\r\n                setSpinner(true)\r\n                setErrorMessage('')\r\n                axios.post('/password/reset', values)\r\n                    .then(res => {\r\n                        setSpinner(false)\r\n                        setButtonSuccessText('OK')\r\n                        setSuccessMessage(res.data.message)\r\n                    })\r\n                    .catch(err => {\r\n                        setSpinner(false)\r\n                        setErrorMessage(err.response.data.message || 'Email inválido.')\r\n                    })\r\n            }\r\n        },\r\n        validationSchema\r\n    })\r\n\r\n\r\n    return (\r\n        <span className=\"d-inline-block mb-2 mr-2\">\r\n            <Modal isOpen={props.modal} toggle={props.toggle}>\r\n                <ModalHeader toggle={props.toggle}>Esqueci minha senha</ModalHeader>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <ModalBody>\r\n                            {!successMessage && \r\n                            <div className=\"form-group\">\r\n                                <label>Digite seu email para resetar a senha:</label>\r\n                                <input type=\"email\" \r\n                                    name=\"email\" \r\n                                    className=\"form-control\" \r\n                                    aria-describedby=\"emailHelp\" \r\n                                    onChange={formik.handleChange} \r\n                                    value={formik.values.email}\r\n                                    onBlur={formik.handleBlur}/>\r\n                                {formik.touched.email && formik.errors.email && <div className=\"alert alert-warning\" role=\"alert\">\r\n                                    {formik.errors.email}\r\n                                </div>}\r\n                            </div>}\r\n                            {successMessage && \r\n                            <div className=\"alert alert-success\" role=\"alert\">\r\n                                {successMessage}\r\n                            </div>}\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                        {!spinner && \r\n                            <Fragment>\r\n                                <button \r\n                                    type=\"submit\" \r\n                                    className=\"btn btn-success\" \r\n                                    >{buttonSuccessText}\r\n                                </button>\r\n                                {!successMessage &&\r\n                                <button \r\n                                    type=\"button\" \r\n                                    className=\"btn btn-danger\" \r\n                                    onClick={props.toggle}\r\n                                    >Cancelar\r\n                                </button>}\r\n                            </Fragment>\r\n                        }\r\n                        {spinner && <Spinner/>}\r\n                        </ModalFooter>\r\n                    </form>\r\n                    {errorMessage && \r\n                    <div className=\"alert alert-warning\" role=\"alert\">\r\n                        {errorMessage}\r\n                    </div>}\r\n            </Modal>\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default ModalForgetPassword;","import React, {useEffect, useState, Fragment} from 'react';\r\nimport LoginForm from './LoginForm/LoginForm'\r\nimport SignupForm from './SignupForm/SignupForm'\r\nimport Tabs from 'react-responsive-tabs';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport ModalForgetPassword from '../../../components/Modals/ModalForgetPassword'\r\n\r\nconst Index = (props) => {\r\n    const [modal, setModal] = useState(false)\r\n    useEffect(() => {\r\n        const token = localStorage.userToken\r\n        if(!!token){\r\n            props.history.push('/dashboard')\r\n        }\r\n    })\r\n\r\n    const setModalHandler = () => {\r\n        setModal(prev=>!prev)\r\n    }\r\n\r\n    const tabsContent = [\r\n        {\r\n            title: 'Login',\r\n            content: <LoginForm toggle={setModalHandler}/>\r\n        },\r\n        {\r\n            title: 'Criar Conta',\r\n            content: <SignupForm/>\r\n        },\r\n    ];\r\n    \r\n    const getTabs = () => {\r\n        return tabsContent.map((tab, index) => ({\r\n            title: tab.title,\r\n            getContent: () => tab.content,\r\n            key: index,\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <ModalForgetPassword modal={modal} toggle={setModalHandler}/>\r\n        \r\n            <div className='loginPanel'>\r\n                <Link to='/'>\r\n                    <div className=\"logo-login margin-auto\"/>\r\n                </Link>\r\n                <Tabs \r\n                    tabsWrapperClass=\"body-tabs body-tabs-layout\" \r\n                    transform={false} \r\n                    showInkBar={true} \r\n                    items={getTabs()}/>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default withRouter(Index);","import React, {useState} from 'react';\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport Axios from '../../../../util/axios-base';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst ResetForm = (props) => {\r\n\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [successMessage, setSuccessMessage] = useState('')\r\n    const [buttonText, setButtonText] = useState('RESETAR')\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email('Por favor, digite um formato de email válido.').required('Por favor, digite um email.'),\r\n        password: Yup.string().required('Digite a senha.').min(6, 'Pelo menos ${min} caracteres').max(30, 'No máximo ${max} caracteres'),\r\n        password2: Yup.string().oneOf([Yup.ref('password'), null], 'Senhas devem ser iguais')\r\n    })\r\n\r\n    const formik = useFormik({ \r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            password2: '',\r\n            token: props.match.params.token\r\n        },\r\n        onSubmit: values => {\r\n            setButtonText('RESETANDO...')\r\n            Axios.post(`/password/reset/${props.match.params.token}`, values)\r\n                .then(res => {\r\n                    setSuccessMessage(res.data.message)\r\n                    setErrorMessage('')\r\n                    setButtonText('SENHA RESETADA!')\r\n                })\r\n                .catch(err => {\r\n                    setErrorMessage(err.response.data.message || 'Desculpe, mas um erro ocorreu.')\r\n                    setButtonText('RESETAR')\r\n                })\r\n        },\r\n        validationSchema\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {!successMessage &&\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label>Email</label>\r\n                    <input \r\n                        type=\"email\" \r\n                        name='email' \r\n                        className=\"form-control\" \r\n                        aria-describedby=\"emailHelp\" \r\n                        onChange={formik.handleChange} \r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.email}/>\r\n                    <small className=\"form-text text-muted\">Seu email cadastrado.</small>\r\n                    {formik.touched.email && formik.errors.email && <div className=\"alert alert-warning\" role=\"alert\">\r\n                        {formik.errors.email}\r\n                    </div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Nova senha</label>\r\n                    <input \r\n                        type=\"password\" \r\n                        name='password' \r\n                        className=\"form-control\" \r\n                        onChange={formik.handleChange} \r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.password}/>\r\n                    {formik.touched.password && formik.errors.password && <div className=\"alert alert-warning\" role=\"alert\">\r\n                        {formik.errors.password}\r\n                    </div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Repita a Senha</label>\r\n                    <input \r\n                        type=\"password\" \r\n                        name='password2' \r\n                        className=\"form-control\" \r\n                        onChange={formik.handleChange} \r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.password2}/>\r\n                    {formik.touched.password2 && formik.errors.password2 && <div className=\"alert alert-warning\" role=\"alert\">\r\n                        {formik.errors.password2}\r\n                    </div>}\r\n                </div>\r\n                <button type=\"submit\" \r\n                    className={`btn btn-lg btn-wide btn-block btn-primary mt-4 ${buttonText!=='RESETAR' ? 'disabled' : ''}`}\r\n                    >\r\n                        {buttonText}\r\n                </button>\r\n            </form>\r\n            }\r\n            {errorMessage && <div className=\"alert alert-warning\" role=\"alert\">\r\n                {errorMessage}\r\n            </div>}\r\n            {successMessage && <div className=\"alert alert-success\" role=\"alert\">\r\n                {successMessage}\r\n            </div>}\r\n            {successMessage && <div className=\"alert alert-info link\" role=\"alert\" onClick={() => props.history.push('/login')}>\r\n                Clique aqui para ir para a tela de login.\r\n            </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(ResetForm);","import React from 'react';\r\nimport ResetForm from './ResetForm/ResetForm'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst index = (props) => {\r\n    return (\r\n            <div className='loginPanel'>\r\n                <div className=\"logo-login margin-auto\"/>\r\n                <ResetForm/>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(index);","import React, {Fragment} from 'react';\nimport {Route} from 'react-router-dom';\nimport LogUser from \"./Login/\";\nimport Reset from \"./Reset/\";\n\nconst Login = ({match}) => (\n    <Fragment>\n        <div className='loginBack'>\n            {/* Login */}\n            <Route exact path={`${match.url}`} component={LogUser}/>\n            {/* Reset */}\n            <Route exact path={`${match.url}/reset/:token`} component={Reset}/>\n        </div>\n    </Fragment>\n);\nexport default Login;"],"sourceRoot":""}